use crate::parser::tokens::Token;
use crate::parser::lexer::LexicalError;
use crate::ast;
use crate::ast::common::Span;
use std::str::FromStr;
use std::sync::Arc;

grammar;

extern {
  type Location = usize;
  type Error = LexicalError;

  enum Token {
    // keywords
    "let" => Token::KeywordLet,
    "const" => Token::KeywordConst,
    "fn" => Token::KeywordFn,
    "return" => Token::KeywordReturn,
    "struct" => Token::KeywordStruct,
    "union" => Token::KeywordUnion,
    "enum" => Token::KeywordEnum,
    "impl" => Token::KeywordImpl,
    "if" => Token::KeywordIf,
    "else" => Token::KeywordElse,
    "while" => Token::KeywordWhile,
    "for" => Token::KeywordFor,
    "match" => Token::KeywordMatch,
    "mod" => Token::KeywordMod,
    "pub" => Token::KeywordPub,
    "mut" => Token::KeywordMut,
    "import" => Token::KeywordImport,
    "extern" => Token::KeywordExtern,
    "as" => Token::KeywordAs,
    "self" => Token::KeywordSelf,

    // literals
    "identifier" => Token::Identifier(<String>),
    "integer" => Token::Integer(<u128>),
    "float" => Token::Float(<String>),
    "string" => Token::String(<String>),
    "char" => Token::Char(<char>),
    "boolean" => Token::Boolean(<bool>),

    // Other
    "docstring" => Token::DocString(<String>),

    "(" => Token::LeftParen,
    ")" => Token::RightParen,
    "{" => Token::LeftBracket,
    "}" => Token::RightBracket,
    "[" => Token::LeftSquareBracket,
    "]" => Token::RightSquareBracket,
    "=" => Token::Assign,
    ";" => Token::Semicolon,
    ":" => Token::Colon,
    "::" => Token::DoubleColon,
    "->" => Token::Arrow,
    "," => Token::Coma,
    "#" => Token::Hashtag,
    "<" => Token::LessThanSign,
    ">" => Token::MoreThanSign,
    ">=" => Token::MoreThanEqSign,
    "<=" => Token::LessThanEqSign,
    "." => Token::Dot,

    // operators
    "+" => Token::OperatorAdd,
    "-" => Token::OperatorSub,
    "*" => Token::OperatorMul,
    "/" => Token::OperatorDiv,
    "%" => Token::OperatorRem,
    "&&" => Token::OperatorAnd,
    "||" => Token::OperatorOr,
    "==" => Token::OperatorEq,
    "!=" => Token::OperatorNe,
    "!" => Token::OperatorNot,
    "~" => Token::OperatorBitwiseNot,
    "^" => Token::OperatorBitwiseXor,
    "&" => Token::Ampersand,
    "|" => Token::OperatorBitwiseOr,
  }
}

// lalrpop macros

Dot<T>: Vec<T> = {
    <mut v:(<T> ".")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

SemiColon<T>: Vec<T> = {
    <mut v:(<T> ";")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

PlusSeparated<T>: Vec<T> = {
    <mut v:(<T> "+")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

List<T>: Vec<T> = {
  <T> => vec![<>],
  <mut s:List<T>> <n:T> => {
      s.push(n);
      s
  },
}

// Requires the semicolon at end
SemiColonSeparated<T>: Vec<T> = {
  <T> ";" => vec![<>],
  <mut s:SemiColonSeparated<T>> <n:T> ";" => {
    s.push(n);
    s
  }
};

// -- Common

DocString: ast::common::DocString = {
  <lo:@L> <contents:"docstring"+> <hi:@R> => ast::common::DocString {
    contents,
    span: ast::common::Span::new(lo, hi),
  },
};

Ident: ast::common::Ident = {
  <lo:@L> <name:"identifier"> <hi:@R> => ast::common::Ident {
    name,
    span: ast::common::Span::new(lo, hi),
  },
  <lo:@L> <name:"self"> <hi:@R> => ast::common::Ident {
    name: name.to_string(),
    span: ast::common::Span::new(lo, hi),
  }
}

TypeName: ast::common::TypeName = {
  <lo:@L> <path:(<Ident> "::")*> <name:Ident> <generics:("<" <Comma<TypeName>> ">")?> <hi:@R> => ast::common::TypeName {
    name,
    path,
    generics: generics.unwrap_or_default(),
    span: ast::common::Span::new(lo, hi),
  }
}

// A Type name in "use" form, needs "::" at end to avoid ambiguity
TypeNameUse: ast::common::TypeName = {
  <lo:@L> <path:(<Ident> "::")*> <name:Ident> <generics:("::" "<" <Comma<TypeName>> ">")?> <hi:@R> => ast::common::TypeName {
    name,
    path,
    generics: generics.unwrap_or_default(),
    span: ast::common::Span::new(lo, hi),
  }
}

TypeDescriptor: ast::types::TypeDescriptor = {
  <lo:@L> <name:TypeName> <hi:@R> => ast::types::TypeDescriptor::Type {
    name,
    span: Span::new(lo, hi),
  },
  <lo:@L> "[" <of_type:TypeDescriptor> <size:(";" <"integer">)> "]"<hi:@R> => ast::types::TypeDescriptor::Array {
    of: Box::new(of_type),
    size: size.try_into().expect("size is too big"),
    span: Span::new(lo, hi),
  },
  <lo:@L> "&" <ty:TypeDescriptor> <hi:@R> =>  ast::types::TypeDescriptor::Ref {
    of: Box::new(ty),
    span: Span::new(lo, hi),
  },
  <lo:@L> "&" "mut" <ty:TypeDescriptor> <hi:@R> =>  ast::types::TypeDescriptor::MutRef {
    of: Box::new(ty),
    span: Span::new(lo, hi),
  },
  <lo:@L> "*" "const" <ty:TypeDescriptor> <hi:@R> =>  ast::types::TypeDescriptor::ConstPtr {
    of: Box::new(ty),
    span: Span::new(lo, hi),
  },
  <lo:@L> "*" "mut" <ty:TypeDescriptor> <hi:@R> =>  ast::types::TypeDescriptor::MutPtr {
    of: Box::new(ty),
    span: Span::new(lo, hi),
  }
}

GenericParam: ast::common::GenericParam = {
  <lo:@L> <name:Ident> <hi:@R> => ast::common::GenericParam {
    name,
    span: Span::new(lo, hi),
  },
}

GenericParams: Vec<ast::common::GenericParam> = {
  "<" <Comma<GenericParam>> ">" => <>
}

// Module list

pub Program: ast::Program = {
  <Module> => {
    ast::Program {
      file_path: None,
      modules: vec![<>],
    }
  },
  <mut s:Program> <n:Module> => {
      s.modules.push(n);
      s
  },
}

// Modules

ExternalModule: ast::common::Ident = {
  "mod" <name:Ident> ";" => name
}

Module: ast::modules::Module = {
  <lo:@L> <doc_string:DocString?> "mod" <name:Ident> "{" <external_modules:List<ExternalModule>?> <imports:ImportList?> <contents:ModuleItems?> "}" <hi:@R> => {
    ast::modules::Module {
      doc_string,
      imports: imports.unwrap_or_else(Vec::new),
      external_modules: external_modules.unwrap_or(vec![]),
      name,
      contents: contents.unwrap_or_else(Vec::new),
      span: Span::new(lo, hi),
    }
  }
}

ImportList: Vec<ast::imports::ImportStmt> = {
  <ImportStmt> => vec![<>],
  <mut s:ImportList> <n:ImportStmt> => {
      s.push(n);
      s
  },
}


ImportStmt: ast::imports::ImportStmt = {
  <lo:@L> "import" <module:Dot<Ident>> "{" <symbols:Comma<Ident>> "}" ";" <hi:@R>  => {
    ast::imports::ImportStmt {
      module,
      symbols,
      span: Span::new(lo, hi),
    }
  }
}


ModuleItems: Vec<ast::modules::ModuleDefItem> = {
  <ModuleDefItem> => vec![<>],
  <mut s:ModuleItems> <n:ModuleDefItem> => {
      s.push(n);
      s
  },
}

ModuleDefItem: ast::modules::ModuleDefItem = {
  <ConstantDef> ";" => {
    ast::modules::ModuleDefItem::Constant(Arc::new(<>))
  },
  <StructDef> => {
    ast::modules::ModuleDefItem::Struct(Arc::new(<>))
  },
  <UnionDef> => {
    ast::modules::ModuleDefItem::Union(Arc::new(<>))
  },
  <EnumDef> => {
    ast::modules::ModuleDefItem::Enum(Arc::new(<>))
  },
  <FunctionDef> => {
    ast::modules::ModuleDefItem::Function(Arc::new(<>))
  },
  <FunctionDecl> ";" => {
    ast::modules::ModuleDefItem::FunctionDecl(Arc::new(<>))
  },
  <ImplBlock> => {
    ast::modules::ModuleDefItem::Impl(Arc::new(<>))
  },
  <Module> => {
    ast::modules::ModuleDefItem::Module(Arc::new(<>))
  },
}

// Constants

ConstantDef: ast::constants::ConstantDef = {
  <doc_string:DocString?> <is_pub:"pub"?> "const" <name:Ident> ":" <type_spec:TypeDescriptor> "=" <exp:Expression> => {
    ast::constants::ConstantDef {
      decl: ast::constants::ConstantDecl {
        doc_string,
        name,
        is_pub: is_pub.is_some(),
        r#type: type_spec
      },
      value: exp,
    }
  },
}

// -- Functions

FunctionRetType: ast::types::TypeDescriptor = {
  "->" <TypeDescriptor> => <>
}

Param: ast::functions::Param = {
  <name:Ident> ":" <param_type:TypeDescriptor> => ast::functions::Param {
    name,
    r#type: param_type
  },
   <lo:@L> <is_ref:"&"?> <is_mut:"mut"?> "self" <hi:@R> => ast::functions::Param {
    name: ast::common::Ident {
      name: "self".to_string(),
      span: Span::new(lo, hi),
    },
    r#type: ast::types::TypeDescriptor::SelfType {
      is_ref: is_ref.is_some(),
      is_mut: is_mut.is_some(),
      span: Span::new(lo, hi),
    },
  }
}

Attribute: ast::common::Attribute = {
  <lo:@L> "#" "[" <name:"identifier"> <value:("=" <"string">)?> "]" <hi:@R> => ast::common::Attribute {
    name,
    value,
    span: ast::common::Span::new(lo, hi),
  }
}

FunctionDecl: ast::functions::FunctionDecl = {
  <lo:@L> <doc_string:DocString?> <attributes:List<Attribute>?> <is_pub:"pub"?> <is_extern:"extern"?>
      "fn" <name:Ident> <generic_params:GenericParams?> "(" <params:Comma<Param>> ")"
        <ret_type:FunctionRetType?> <hi:@R> =>
    ast::functions::FunctionDecl {
        doc_string,
        generic_params: generic_params.unwrap_or(vec![]),
        attributes: attributes.unwrap_or(vec![]),
        name,
        params,
        ret_type,
        is_extern: is_extern.is_some(),
        is_pub: is_pub.is_some(),
        span: Span::new(lo, hi),
  }
}

FunctionDef: ast::functions::FunctionDef = {
  <lo:@L> <decl:FunctionDecl> "{" <statements:StatementList?> "}" <hi:@R> => {
    ast::functions::FunctionDef {
      decl: decl.into(),
      body: statements.unwrap_or_else(Vec::new),
      span: Span::new(lo, hi),
    }
  }
}

ImplBlock: ast::functions::ImplBlock = {
  <lo:@L> "impl" <target:TypeDescriptor> "{" <methods:FunctionDef*> "}" <hi:@R> => {
    ast::functions::ImplBlock {
      target,
      methods: methods.into_iter().map(|x| Arc::new(x)).collect(),
      span: Span::new(lo, hi),
    }
  }
}

// Struct

StructField: ast::structs::Field = {
    <lo:@L> <name:Ident> ":" <r#type:TypeDescriptor> <hi:@R> => ast::structs::Field {
        name,
        r#type,
        span: Span::new(lo, hi),
    }
}

StructDef: ast::structs::StructDecl = {
    <lo:@L> "struct" <name:Ident> <generics:GenericParams?> "{" <fields:Comma<StructField>> "}" <hi:@R> => ast::structs::StructDecl {
        name,
        fields,
        generics: generics.unwrap_or(vec![]),
        span: Span::new(lo, hi),
    }
}


UnionDef: ast::enums::UnionDecl = {
    <lo:@L> "union" <name:Ident> <generics:GenericParams?> "{" <variants:Comma<StructField>> "}" <hi:@R> => ast::enums::UnionDecl {
        name,
        variants,
        generics: generics.unwrap_or(vec![]),
        span: Span::new(lo, hi),
    }
}

EnumDef: ast::enums::EnumDecl = {
    <lo:@L> "enum" <name:Ident> <generics:GenericParams?> "{" <variants:Comma<EnumVariant>> "}" <hi:@R> => ast::enums::EnumDecl {
        name,
        variants,
        generics: generics.unwrap_or(vec![]),
        span: Span::new(lo, hi),
    }
}


EnumVariant: ast::enums::EnumVariant = {
    <lo:@L> <name:Ident> <fields:("{" <Comma<StructField>> "}")?> <discriminant:("=" <Expression>)?><hi:@R> => ast::enums::EnumVariant {
        name,
        fields: fields.unwrap_or_default(),
        discriminant,
        span: Span::new(lo, hi),
    }
}

StructInitField: (ast::common::Ident, ast::expressions::StructInitField) = {
    <lo:@L> <name:Ident> ":" <value:StructInitExpr>  <hi:@R> => (name, ast::expressions::StructInitField {
        value: ast::expressions::Expression::StructInit(value),
        span: Span::new(lo, hi),
    }),
    <lo:@L> <name:Ident> ":" <value:Expression> <hi:@R> => (name, ast::expressions::StructInitField {
        value,
        span: Span::new(lo, hi),
    }),
}

StructInitExpr: ast::expressions::StructInitExpr = {
  <lo:@L> <name:TypeNameUse> "{" <fields:Comma<StructInitField>> "}" <hi:@R> => ast::expressions::StructInitExpr {
    name,
    fields: fields.into_iter().collect(),
    span: Span::new(lo, hi),
  }
}


ArrayInitExpr: ast::expressions::ArrayInitExpr = {
  <lo:@L> "[" <values:Comma<Expression>> "]" <hi:@R> => ast::expressions::ArrayInitExpr {
    values: values.into_iter().collect(),
    span: Span::new(lo, hi),
  }
}

// Expressions

Term: ast::expressions::Expression = {
  #[precedence(level="0")]
  <lo:@L> <v:ValueExpr> <hi:@R> => ast::expressions::Expression::Value(v, Span::new(lo, hi)),
  <FnCallOp> => ast::expressions::Expression::FnCall(<>),
  <MatchExpr> => ast::expressions::Expression::Match(<>),
  <IfExpr> => ast::expressions::Expression::If(<>),
  #[precedence(level="1")] #[assoc(side="left")]
  "(" <Expression> ")",
}

Expression: ast::expressions::Expression = {
  #[precedence(level="0")]
  <Term>,
  #[precedence(level="1")] #[assoc(side="left")]
  <lo:@L> "&" "mut" <e:Expression> <hi:@R> => ast::expressions::Expression::AsRef(Box::new(e), true, Span::new(lo, hi)),
  <lo:@L> "&" <e:Expression> <hi:@R> => ast::expressions::Expression::AsRef(Box::new(e), false, Span::new(lo, hi)),
  <lo:@L> "*" <e:Expression> <hi:@R> => ast::expressions::Expression::Deref(Box::new(e), Span::new(lo, hi)),
  <op:UnaryOp> <rhs:Expression> => ast::expressions::Expression::UnaryOp(
    op,
    Box::new(rhs)
  ),
  #[precedence(level="2")] #[assoc(side="left")]
  <lhs:Expression> <op:BinaryFirstLvlOp> <rhs:Expression> => ast::expressions::Expression::BinaryOp(
    Box::new(lhs),
    op,
    Box::new(rhs)
  ),
  #[precedence(level="3")] #[assoc(side="left")]
  <lhs:Expression> <op:BinarySecondLvlOp> <rhs:Expression> => ast::expressions::Expression::BinaryOp(
    Box::new(lhs),
    op,
    Box::new(rhs)
  ),
  #[precedence(level="4")] #[assoc(side="left")]
  <lhs:Expression> <op:BinaryThirdLvlOp> <rhs:Expression> => ast::expressions::Expression::BinaryOp(
    Box::new(lhs),
    op,
    Box::new(rhs)
  ),
  #[precedence(level="5")] #[assoc(side="left")]
  <lo:@L> <a:Expression> "as" <b: TypeDescriptor> <hi:@R> => ast::expressions::Expression::Cast(Box::new(a), b, Span::new(lo, hi)),
  "(" <StructInitExpr> ")" => ast::expressions::Expression::StructInit(<>),
  <ArrayInitExpr> => ast::expressions::Expression::ArrayInit(<>),
}

BinaryFirstLvlOp: ast::expressions::BinaryOp = {
  "==" => ast::expressions::BinaryOp::Compare(ast::expressions::CmpOp::Eq),
  "!=" => ast::expressions::BinaryOp::Compare(ast::expressions::CmpOp::NotEq),
  "<" => ast::expressions::BinaryOp::Compare(ast::expressions::CmpOp::Lt),
  ">" => ast::expressions::BinaryOp::Compare(ast::expressions::CmpOp::Gt),
  "<=" => ast::expressions::BinaryOp::Compare(ast::expressions::CmpOp::LtEq),
  ">=" => ast::expressions::BinaryOp::Compare(ast::expressions::CmpOp::GtEq),
  "&&" => ast::expressions::BinaryOp::Logic(ast::expressions::LogicOp::And),
  "||" => ast::expressions::BinaryOp::Logic(ast::expressions::LogicOp::Or),
}

BinarySecondLvlOp: ast::expressions::BinaryOp = {
  "/" => ast::expressions::BinaryOp::Arith(ast::expressions::ArithOp::Div),
  "*" => ast::expressions::BinaryOp::Arith(ast::expressions::ArithOp::Mul),
  "%" => ast::expressions::BinaryOp::Arith(ast::expressions::ArithOp::Mod),
}

BinaryThirdLvlOp: ast::expressions::BinaryOp = {
  "+" => ast::expressions::BinaryOp::Arith(ast::expressions::ArithOp::Add),
  "-" => ast::expressions::BinaryOp::Arith(ast::expressions::ArithOp::Sub),
  "&" => ast::expressions::BinaryOp::Bitwise(ast::expressions::BitwiseOp::And),
  "|" => ast::expressions::BinaryOp::Bitwise(ast::expressions::BitwiseOp::Or),
  "^" => ast::expressions::BinaryOp::Bitwise(ast::expressions::BitwiseOp::Xor),
}

UnaryOp: ast::expressions::UnaryOp = {
  "-" => ast::expressions::UnaryOp::ArithNeg,
  "!" => ast::expressions::UnaryOp::LogicalNot,
  "~" => ast::expressions::UnaryOp::BitwiseNot,
}

ValueExpr: ast::expressions::ValueExpr = {
  <lo:@L> <v:"integer"> <hi:@R> => ast::expressions::ValueExpr::ConstInt(v, Span::new(lo, hi)),
  <lo:@L> <v:"float"> <hi:@R> => ast::expressions::ValueExpr::ConstFloat(v, Span::new(lo, hi)),
  <lo:@L> <v:"boolean"> <hi:@R> => ast::expressions::ValueExpr::ConstBool(v, Span::new(lo, hi)),
  <lo:@L> <v:"string"> <hi:@R> => ast::expressions::ValueExpr::ConstStr(v, Span::new(lo, hi)),
  <lo:@L> <v:"char"> <hi:@R> => ast::expressions::ValueExpr::ConstChar(v, Span::new(lo, hi)),
  <PathOp> => ast::expressions::ValueExpr::Path(<>),
}

IfExpr: ast::expressions::IfExpr = {
  <lo:@L> "if" <cond:Expression> "{" <block_stmts:StatementList> "}"
    <else_stmts:("else" "{" <StatementList> "}")?> <hi:@R> => {
    ast::expressions::IfExpr {
      cond: Box::new(cond),
      block_stmts,
      else_stmts,
      span: Span::new(lo, hi)
    }
  }
}

MatchExpr: ast::expressions::MatchExpr = {
  <lo:@L> "match" <expr:Expression> "{" <variants:Comma<MatchVariant>> "}" <hi:@R> => {
    ast::expressions::MatchExpr {
      expr: Box::new(expr),
      variants,
      span: Span::new(lo, hi)
    }
  }
}

MatchVariant: ast::expressions::MatchVariant = {
  // 0 -> 1
  <lo:@L> <case:ValueExpr> "->" <stmt:Statement> <hi:@R> => {
    ast::expressions::MatchVariant {
      case,
      block: vec![stmt],
      span: Span::new(lo, hi)
    }
  },
  // x -> { ... }
  <lo:@L> <case:ValueExpr> "->" "{" <stmts:StatementList> "}" <hi:@R> => {
    ast::expressions::MatchVariant {
      case,
      block: stmts,
      span: Span::new(lo, hi)
    }
  }
}

PathOp: ast::expressions::PathOp = {
  <lo:@L> <first:Ident> <extra:PathSegments?> <hi:@R> => ast::expressions::PathOp {
    first,
    extra: extra.unwrap_or(vec![]),
    span: Span::new(lo, hi),
  },
}

PathSegment: ast::expressions::PathSegment = {
  <lo:@L> "." <e:Ident> <hi:@R> => ast::expressions::PathSegment::FieldAccess(e, Span::new(lo, hi)),
  <lo:@L> "." <e:FnCallOp> <hi:@R> => ast::expressions::PathSegment::MethodCall(e, Span::new(lo, hi)),
  <lo:@L> "[" <e:ValueExpr> "]" <hi:@R> => ast::expressions::PathSegment::ArrayIndex(e, Span::new(lo, hi)),
}

PathSegments: Vec<ast::expressions::PathSegment> = {
  <PathSegment> => vec![<>],
  <mut s:PathSegments> <n:PathSegment> => {
      s.push(n);
      s
  },
}

FnCallOp: ast::expressions::FnCallOp = {
  <lo:@L> <target:Ident> <generics:("::" "<" <Comma<TypeName>> ">")?> "(" <args:Comma<Expression>> ")" <hi:@R> => ast::expressions::FnCallOp {
    target,
    generics: generics.unwrap_or_default(),
    args,
    span: Span::new(lo, hi),
  }
}

// -- Statements

StatementList: Vec<ast::statements::Statement> = {
  <Statement> => vec![<>],
  <mut s:StatementList> <n:Statement> => {
      s.push(n);
      s
  },
}

Statement: ast::statements::Statement = {
  <MatchExpr> ";"? => ast::statements::Statement::Match(<>),
  <IfExpr> ";"? => ast::statements::Statement::If(<>),
  <WhileStmt> ";"? => ast::statements::Statement::While(<>),
  <ForStmt> ";"? => ast::statements::Statement::For(<>),
  <LetStmt> ";" => ast::statements::Statement::Let(<>),
  <AssignStmt> ";" => ast::statements::Statement::Assign(<>),
  <FnCallOp> ";" => ast::statements::Statement::FnCall(<>),
  <PathOp> ";" => ast::statements::Statement::PathOp(<>),
  <ReturnStmt> ";" => ast::statements::Statement::Return(<>),
}

LetStmt: ast::statements::LetStmt = {
  <lo:@L> "let" <is_mutable:"mut"?> <id:Ident> ":" <target_type:TypeDescriptor> "=" <value:Expression> <hi:@R> => ast::statements::LetStmt {
    is_mutable: is_mutable.is_some(),
    target: ast::statements::LetStmtTarget::Simple {
      id,
      r#type: target_type
    },
    value,
    span: Span::new(lo, hi),
  },
  <lo:@L> "let" <is_mutable:"mut"?> <id:Ident> ":" <target_type:TypeDescriptor> "=" <value:StructInitExpr> <hi:@R> => ast::statements::LetStmt {
    is_mutable: is_mutable.is_some(),
    target: ast::statements::LetStmtTarget::Simple {
      id,
      r#type: target_type
    },
    value: ast::expressions::Expression::StructInit(value),
    span: Span::new(lo, hi),
  },
}

AssignStmt: ast::statements::AssignStmt = {
  <lo:@L> <derefs:"*"*> <lvalue:PathOp> "=" <rvalue:Expression> <hi:@R> => ast::statements::AssignStmt {
    lvalue,
    rvalue,
    derefs: derefs.len(),
    span: Span::new(lo, hi),
  },
   <lo:@L> <derefs:"*"*> <lvalue:PathOp> "=" <rvalue:StructInitExpr> <hi:@R> => ast::statements::AssignStmt {
    lvalue,
    rvalue: ast::expressions::Expression::StructInit(rvalue),
    derefs: derefs.len(),
    span: Span::new(lo, hi),
  },
}

ReturnStmt: ast::statements::ReturnStmt = {
  <lo:@L> "return" <value:Expression?> <hi:@R> => ast::statements::ReturnStmt {
    value,
    span: Span::new(lo, hi),
  },
}

WhileStmt: ast::statements::WhileStmt = {
  "while" <condition:Expression> "{" <block_stmts:StatementList> "}" => {
    ast::statements::WhileStmt {
      condition,
      block_stmts,
    }
  }
}


ForStmt: ast::statements::ForStmt = {
  <lo:@L> "for" "(" <init:LetStmt?> ";" <condition:Expression?> ";" <post:AssignStmt?> ")" "{" <block_stmts:StatementList> "}" <hi:@R> => {
    ast::statements::ForStmt {
      init,
      condition,
      post,
      block_stmts,
      span: Span::new(lo, hi)
    }
  },
  <lo:@L> "for" "(" <condition:Expression> ")" "{" <block_stmts:StatementList> "}" <hi:@R> => {
    ast::statements::ForStmt {
      init: None,
      condition: Some(condition),
      post: None,
      block_stmts,
      span: Span::new(lo, hi)
    }
  },
  <lo:@L> "for" "{" <block_stmts:StatementList> "}" <hi:@R> => {
    ast::statements::ForStmt {
      init: None,
      condition: None,
      post: None,
      block_stmts,
      span: Span::new(lo, hi)
    }
  }
}
