mod vec {
    extern fn malloc(size: u64) -> *mut u8;
    extern fn realloc(ptr: *mut u8, size: u64) -> *mut u8;

    #[intrinsic = "sizeof"]
    fn sizeof<T>() -> u64;

    struct Vec<T> {
        ptr: *mut T,
        len: u64,
        cap: u64,
    }

    impl<T> Vec<T> {
        pub fn new() -> Vec<T> {
            let vec: Vec<T> = Vec::<T> {
                ptr: malloc(sizeof::<T>() * 32) as *mut T,
                len: 0,
                cap: 32,
            };
            return vec;
        }

        pub fn push(&mut self, value: T) {
            let type_size: u64 = sizeof::<T>();

            if self.len <= self.cap {
                let new_cap: u64 = self.cap * 2;
                self.ptr = realloc(self.ptr as *mut u8, type_size * new_cap) as *mut T;
                self.cap = new_cap;
            }

            let target_ptr: *mut T = (self.ptr + self.len) as *mut T;
            *target_ptr = value;
            self.len = self.len + 1;
        }

        pub fn get(&self, at: u64) -> &T {
            // todo: bounds check
            let target_ptr: *mut T = self.ptr + at;
            return target_ptr as &T;
        }
    }

    fn main() -> i32 {
        let mut vec: Vec<i32> = Vec::<i32>#new();

        vec.push(2);
        vec.push(3);
        vec.push(4);
        vec.push(5);
        let pushed: &i32 = vec.get(2);

        return *pushed;
    }
}
