mod opaque_vec {
    extern fn malloc(size: u64) -> *mut u8;
    extern fn realloc(ptr: *mut u8, size: u64) -> *mut u8;

    struct OpaqueVec {
        ptr: *mut u8,
        len: u64,
        cap: u64,
        element_size: u64,
    }

    impl OpaqueVec {
        pub fn push<T>(&mut self, value: T) {
            // doesnt handle cap realloc
            if self.len <= self.cap {
                let new_cap: u64 = self.cap * 2;
                self.ptr = realloc(self.ptr, self.element_size * new_cap);
                self.cap = new_cap;
            }
            let target_ptr: *mut T = (self.ptr + (self.len * self.element_size)) as *mut T;
            *target_ptr = value;
            self.len = self.len + 1;
        }

        pub fn get<T>(&self, at: u64) -> &T {
            // todo: bounds check
            let target_ptr: *mut T = (self.ptr + (at * self.element_size)) as *mut T;
            return target_ptr as &T;
        }
    }

    fn main() -> i32 {
        // Still missing impl static methods.

        let element_size: u64 = 4;
        let mut vec: OpaqueVec = OpaqueVec {
            ptr: malloc(element_size * 32),
            len: 0,
            cap: 32,
            element_size: element_size,
        };

        vec.push::<i32>(2);
        vec.push::<i32>(3);
        vec.push::<i32>(4);
        vec.push::<i32>(5);
        let pushed: &i32 = vec.get::<i32>(2);

        return *pushed;
    }
}
